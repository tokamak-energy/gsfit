# This file was autogenerated, but was significantly modified to:
# 1. Build inside the ghcr.io/pyo3/maturin container, so that OpenBLAS and OpenSSL can be installed
# 2. The "test" job was added
#
# To recreate original, run:
#    maturin generate-ci --platform=manylinux github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  rust_tests:
    name: Rust tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Rust tests, in maturin container
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/pyo3/maturin
          options: -v ${{ github.workspace }}:/workspace -w /workspace
          run: |
            # Install OpenBLAS, and OpenSSL
            yum update -y && yum install -y openblas-devel openssl-devel
            # Perform Rust tests
            cargo test --manifest-path rust/Cargo.toml --package gsfit_rs --lib -- --show-output
            cargo test --doc --manifest-path rust/Cargo.toml -- --show-output

  build_wheels_on_linux:
    name: Build wheels for different Python versions
    runs-on: ubuntu-latest
    needs: [rust_tests]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Build Python wheels (compiling Rust), in maturin container
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/pyo3/maturin
          options: -v ${{ github.workspace }}:/workspace -w /workspace
          run: |
            yum update -y && yum install -y openblas-devel openssl-devel
            maturin build --release -i python3.11
            maturin build --release -i python3.12
            maturin build --release -i python3.13
      - name: Upload wheels to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux
          path: rust/target/wheels/

  sdist:
    name: Source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Build sdist (source distribution)
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  python_test:
    name: Python tests
    runs-on: ubuntu-latest
    needs: [build_wheels_on_linux]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-linux
      - name: List files
        run: ls -l
      - name: Clone FreeGSNKE repository
        run: |
          mkdir -p ~/github
          git clone https://github.com/FusionComputingLab/freegsnke.git ~/github/freegsnke
      - name: Install wheel and [dev,with_freegs_and_freegsnke] dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install gsfit-0.0.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl[dev,with_freegs_and_freegsnke]
      - name: Fix FreeGS __author__ bug
        run: |
          # FreeGS has a bug where the __author__ variable is created from a metadata object which doesn't have an "Author" key
          FREEGS_PATH=$(python -c "import freegs; print(freegs.__file__)")
          echo $FREEGS_PATH
          sed -i 's/__author__ = metadata(__package__)\["Author"\]/__author__ = "Ben Dudson"/' "$FREEGS_PATH"
      - name: Run Jupyter notebook Python tests
        run: |
          # Run the MAST-U FreeGSNKE notebook
          python -m pytest --nbval-lax examples/example_02_mastu_with_synthetic_data_from_freegsnke.ipynb
      - name: Run MyPy Python tests
        run: mypy python/

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [build_wheels_on_linux, sdist, python_test]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - name: Download all artifacts (wheels-linux and sdist)
        uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
