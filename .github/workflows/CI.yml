# This file was autogenerated, but was significantly modified. To regenerate, use:
#    maturin generate-ci --platform=manylinux github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  sdist:
    name: Source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Build sdist (source distribution)
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  linux_rust_tests:
    name: "Linux: Rust tests"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install system dependencies
        run: |
          sudo apt-get update
          apt-cache search libpython
          # In ubuntu-latest, only `libpython3.12-dev` is available
          sudo apt-get install -y libopenblas-dev libpython3.12-dev
      - name: Run Rust tests
        run: |
          # Update Rust and print version
          rustup update
          rustc --version
          
          # Set LD_LIBRARY_PATH so test binaries can find libpython at runtime
          # Python 3.12 from actions/setup-python includes the shared library
          export LD_LIBRARY_PATH=$(python3.12 -c 'import sysconfig; print(sysconfig.get_config_var("LIBDIR"))'):$LD_LIBRARY_PATH
          # Verify Python and library
          python3.12 --version
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
          ls -la $(python3.12 -c 'import sysconfig; print(sysconfig.get_config_var("LIBDIR"))')/libpython* || true
          # Run tests
          cargo test --manifest-path rust/Cargo.toml --package data_tree --package gsfit_rs --lib -- --show-output
          cargo test --doc --manifest-path rust/Cargo.toml -- --show-output

  linux_build_wheels:
    name: "Linux: Build Python wheels"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Build Python wheels (compiling Rust), in maturin container
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/pyo3/maturin
          options: -v ${{ github.workspace }}:/workspace -w /workspace
          run: |
            # Install OpenBLAS and OpenSSL from package manager
            yum update -y && yum install -y openblas-devel openssl-devel

            # Update Rust and print version
            rustup update
            rustc --version

            # Build wheels for different Python versions
            maturin build --release -i python3.11
            maturin build --release -i python3.12
            maturin build --release -i python3.13
      - name: Upload wheels to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux
          path: rust/target/wheels/

  linux_python_tests:
    name: "Linux: Python tests"
    runs-on: ubuntu-latest
    needs: [linux_build_wheels]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-linux
      - name: List files
        run: |
          ls -l
          echo "---- Recursively listing downloaded artifacts ----"
          ls -lR || true
      - name: Find absolute path to Python wheel
        run: |
          # Set bash to strict mode; exit on any error
          set -euo pipefail
          # Get Python tag, e.g. "cp311"
          PYTAG=$(python -c 'import sys;print(f"cp{sys.version_info.major}{sys.version_info.minor}")')
          echo "Detected Python tag: ${PYTAG}"
          # Find a wheel matching current Python and platform
          WHEEL_PATH=$(find . -type f -name "gsfit-*-${PYTAG}-${PYTAG}-*.whl" | head -n 1)
          if [ -z "${WHEEL_PATH}" ]; then
            echo "No matching wheel found for ${PYTAG}" >&2
            exit 1
          fi
          WHEEL_PATH=$(realpath "${WHEEL_PATH}")
          echo "WHEEL_PATH=${WHEEL_PATH}" | tee -a $GITHUB_ENV
          WHEEL_URI=$(python -c 'import pathlib,sys; print(pathlib.Path(sys.argv[1]).resolve().as_uri())' "${WHEEL_PATH}")
          echo "WHEEL_URI=${WHEEL_URI}" | tee -a $GITHUB_ENV
      - name: Clone FreeGSNKE repository
        run: |
          mkdir -p ~/github
          git clone https://github.com/FusionComputingLab/freegsnke.git ~/github/freegsnke
      - name: Install wheel and [dev,with_freegs_and_freegsnke] dependencies
        run: |
          python -m pip install --upgrade pip
          # Install the locally built wheel with extras using a PEP 508 direct reference
          python -m pip install "gsfit[dev,with_freegs_and_freegsnke] @ ${WHEEL_URI}"
          python -m pip list
      - name: Run Jupyter notebook Python tests
        run: |
          set -euo pipefail
          # Uninstall pytest-xdist to prevent parallel execution; perhaps this is the cause of Jupyter notebook hanging?
          python -m pip uninstall -y pytest-xdist
          # Run the MAST-U FreeGSNKE notebook as a test
          python -m pytest --nbval-lax examples/example_02_mastu_with_synthetic_data_from_freegsnke.ipynb
          # Execute the notebook and save an executed copy, then copy it over the original so the next step uploads the executed result
          python - <<'PY'
            from pathlib import Path
            import shutil
            from nbformat import read, write
            from nbclient import NotebookClient

            src = Path("examples/example_02_mastu_with_synthetic_data_from_freegsnke.ipynb")
            out_dir = Path("examples/artifacts")
            out_dir.mkdir(parents=True, exist_ok=True)
            dst = out_dir / f"{src.stem}-executed.ipynb"

            with src.open(encoding="utf-8") as f:
                nb = read(f, as_version=4)

            client = NotebookClient(nb, timeout=1800, kernel_name="python3", allow_errors=True)
            client.execute()

            with dst.open("w", encoding="utf-8") as f:
                write(nb, f)

            # Ensure the upload step picks up the executed notebook
            shutil.copyfile(dst, src)
            print(f"Executed notebook saved to: {dst} and copied to: {src}")
            PY
      - name: Upload executed notebook artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux_example_02_mastu_notebook
          path: examples/example_02_mastu_with_synthetic_data_from_freegsnke.ipynb
      - name: Run mypy Python tests
        run: mypy python/

  macos_build_wheels:
    name: "macOS: Build Python wheels"
    runs-on: macos-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install dependencies
        run: |
          brew install openblas
          python3.11 -m pip install --upgrade pip maturin
          python3.12 -m pip install --upgrade pip maturin
          python3.13 -m pip install --upgrade pip maturin
      - name: Build Python wheels (compiling Rust)
        run: |
          # Update Rust and print version
          rustup update
          rustc --version

          # Build wheels for different Python versions
          maturin build --release -i python3.11
          maturin build --release -i python3.12
          maturin build --release -i python3.13
      - name: Upload wheels to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos
          path: rust/target/wheels/

  macos_python_tests:
    name: "macOS: Python tests"
    runs-on: macos-latest
    needs: [macos_build_wheels]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-macos
      - name: List files
        run: |
          ls -l
          echo "---- Recursively listing downloaded artifacts ----"
          ls -lR || true
      - name: Find absolute path to Python wheel
        run: |
          # Set terminal to strict mode; exit on any error
          set -euo pipefail
          # Get Python tag, e.g. "cp311"
          PYTAG=$(python -c 'import sys;print(f"cp{sys.version_info.major}{sys.version_info.minor}")')
          echo "Detected Python tag: ${PYTAG}"
          # Find a wheel matching current Python and platform
          WHEEL_PATH=$(find . -type f -name "gsfit-*-${PYTAG}-${PYTAG}-*.whl" | head -n 1)
          if [ -z "${WHEEL_PATH}" ]; then
            echo "No matching wheel found for ${PYTAG}" >&2
            exit 1
          fi
          WHEEL_PATH=$(realpath "${WHEEL_PATH}")
          echo "WHEEL_PATH=${WHEEL_PATH}" | tee -a $GITHUB_ENV
          WHEEL_URI=$(python -c 'import pathlib,sys; print(pathlib.Path(sys.argv[1]).resolve().as_uri())' "${WHEEL_PATH}")
          echo "WHEEL_URI=${WHEEL_URI}" | tee -a $GITHUB_ENV
      - name: Clone FreeGSNKE repository
        run: |
          mkdir -p ~/github
          git clone https://github.com/FusionComputingLab/freegsnke.git ~/github/freegsnke
      - name: Install wheel and [dev,with_freegs_and_freegsnke] dependencies
        run: |
          python -m pip install --upgrade pip
          # Install the locally built wheel with extras using a PEP 508 direct reference
          python -m pip install "gsfit[dev,with_freegs_and_freegsnke] @ ${WHEEL_URI}"
      - name: Run Jupyter notebook Python tests
        run: |
          python -m pytest --nbval-lax examples/example_02_mastu_with_synthetic_data_from_freegsnke.ipynb
      - name: Run mypy Python tests
        run: mypy python/

  windows_build_wheels:
    name: "Windows: Build Python wheels"
    runs-on: windows-latest
    steps:
      - name: Cache installation of OpenBLAS and LAPACK (via `vcpkg`)
        id: cache-vcpkg
        uses: actions/cache@v4
        with:
          path: "C:/vcpkg"
          key: vcpkg-${{ runner.os }}-openblas-lapack-v1
          restore-keys: vcpkg-${{ runner.os }}-openblas-lapack-
      - name: Install OpenBLAS via `vcpkg` (might be skipped if cached)
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          # Install `vcpkg` for all users, into "C:/vcpkg/...", and make `vcpkg` command available in `PATH`
          .\vcpkg\vcpkg integrate install
          vcpkg install openblas:x64-windows-static-md
          vcpkg install lapack-reference:x64-windows-static-md
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install dependencies
        run: |
          py -3.11 -m pip install --upgrade pip maturin
          py -3.12 -m pip install --upgrade pip maturin
          py -3.13 -m pip install --upgrade pip maturin

      - name: Copy OpenBLAS and LAPACK DLLs to Python package
        run: |
          # Copy all DLLs from vcpkg to the Python package directory
          Copy-Item "C:/vcpkg/installed/x64-windows-static-md/bin/*.dll" -Destination "python/gsfit_rs/" -ErrorAction Stop
          # List what DLLs are available in vcpkg (for debugging)
          Write-Host "Available DLLs in vcpkg bin directory:"
          Get-ChildItem "C:/vcpkg/installed/x64-windows-static-md/bin/*.dll" | Select-Object Name
          # List what's now in the Python package directory
          Write-Host "DLLs copied to python/gsfit_rs:"
          Get-ChildItem "python/gsfit_rs/*.dll" -ErrorAction Stop | Select-Object Name

      - name: Build Python wheels (compiling Rust)
        env:
          VCPKG_ROOT: C:/vcpkg
        run: |
          # Update Rust and print version
          rustup update
          rustc --version

          # Build wheels for different Python versions
          maturin build --release -i python3.11
          maturin build --release -i python3.12
          maturin build --release -i python3.13
      - name: Upload wheels to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows
          path: rust/target/wheels/

  windows_python_tests:
    name: "Windows: Python tests"
    runs-on: windows-latest
    needs: [windows_build_wheels]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-windows
      - name: List files
        run: dir
      - name: Find absolute path to Python wheel
        shell: pwsh
        run: |
          # Get Python tag, e.g. "cp311"
          $pyTag = py -3.11 -c "import sys;print(f'cp{sys.version_info.major}{sys.version_info.minor}')"
          Write-Host "Detected Python tag:" $pyTag
          $wheel = Get-ChildItem -Recurse -Filter "gsfit-*-$pyTag-$pyTag-*.whl" | Select-Object -First 1
          if (-not $wheel) { throw "No matching wheel found for $pyTag" }
          $uri = [System.Uri]::new($wheel.FullName).AbsoluteUri
          Add-Content -Path $env:GITHUB_ENV -Value "WHEEL_URI=$uri"
          Write-Host "Discovered wheel URI:" $uri
      - name: Clone FreeGSNKE repository
        run: |
          mkdir $env:USERPROFILE\github
          git clone https://github.com/FusionComputingLab/freegsnke.git $env:USERPROFILE\github\freegsnke
      - name: Install wheel and [dev,with_freegs_and_freegsnke] dependencies
        run: |
          py -3.11 -m pip install --upgrade pip
          # Install the locally built wheel with extras using a PEP 508 direct reference
          py -3.11 -m pip install "gsfit[dev,with_freegs_and_freegsnke] @ $env:WHEEL_URI"
      - name: Run Jupyter notebook Python tests
        # env:
        #   VCPKG_ROOT: C:/vcpkg
        run: |
          py -3.11 -m pytest --nbval-lax examples/example_02_mastu_with_synthetic_data_from_freegsnke.ipynb
      - name: Run mypy Python tests
        # env:
        #   VCPKG_ROOT: C:/vcpkg
        run: mypy python/

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [sdist, linux_rust_tests, linux_build_wheels, linux_python_tests, macos_build_wheels, macos_python_tests, windows_build_wheels, windows_python_tests]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - name: Download all artifacts (wheels-linux and sdist)
        uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
